<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MechTE_480</name>
    </assembly>
    <members>
        <member name="T:MechTE_480.AssertCategory.MAssertUtil">
            <summary>
            自定义断言类 , throw new Exception 异常
            </summary>
        </member>
        <member name="M:MechTE_480.AssertCategory.MAssertUtil.IsEmpty(System.String,System.String)">
            <summary>
            判断字符串是否为空，如为空则抛出异常
            </summary>
            <param name="value">需要判断的值</param>
            <param name="errMsg">异常提示</param>
        </member>
        <member name="M:MechTE_480.AssertCategory.MAssertUtil.Assert(System.Boolean,System.String)">
            <summary>
            result == true抛出异常
            </summary>
            <param name="result">bool</param>
            <param name="errMsg">错误信息</param>
            <remarks>系统断言不能在 Release 版保留，用这个方法替代</remarks>
        </member>
        <member name="M:MechTE_480.AssertCategory.MAssertUtil.Assert(System.Func{System.Boolean},System.String)">
            <summary>
            自定义断言方法， func() == true 抛出异常    
            </summary>
            <param name="func"></param>
            <param name="errMsg"></param>
            <remarks>系统断言不能在 Release 版保留，用这个方法替代</remarks>
        </member>
        <member name="M:MechTE_480.AssertCategory.MAssertUtil.Assert(System.String)">
            <summary>
            直接报错误提示
            </summary>
            <param name="errMsg"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:MechTE_480.ConvertCategory.MConvertUtil">
            <summary>
            处理数据类型转换，数制转换、编码转换相关的类
            </summary>    
            <summary>
            处理数据类型转换，数制转换、编码转换相关的类
            </summary>    
        </member>
        <member name="M:MechTE_480.ConvertCategory.MConvertUtil.StringToHidFormat(System.String)">
            <summary>
            将字符转换HID指令格式 (name=0021032334 > 00 21 03 23 34)
            </summary>
            <param name="value"></param>
            <returns>string</returns>
        </member>
        <member name="M:MechTE_480.ConvertCategory.MConvertUtil.AsciiStringToHexString(System.String)">
            <summary>
            ASCII字符转为16进制字符
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.ConvertCategory.MConvertUtil.HexStringToAsciiString(System.String)">
            <summary>
            将16进制字符转为ASCII字符
            </summary>
            <param name="hex">16个数字（0-9和A-F）来表示</param>
            <returns>ASCII字符</returns>
        </member>
        <member name="M:MechTE_480.ConvertCategory.MConvertUtil.ToInt32(System.String)">
            <summary>
            将字符串转换为整型，转换失败返回0
            </summary>
        </member>
        <member name="M:MechTE_480.ConvertCategory.MConvertUtil.MToInt32(System.String)">
            <summary>
            将字符串转换为整型，转换失败返回0
            </summary>
        </member>
        <member name="M:MechTE_480.ConvertCategory.MConvertUtil.ToInt64(System.String)">
            <summary>
            将字符串转换为长整型，转换失败返回0
            </summary>
        </member>
        <member name="M:MechTE_480.ConvertCategory.MConvertUtil.ToBoolean(System.String,System.Boolean)">
            <summary>
            将字符串转换为布尔型，转换失败返回默认值，默认值false
            </summary>
        </member>
        <member name="M:MechTE_480.ConvertCategory.MConvertUtil.ToBoolean(System.Object,System.Boolean)">
            <summary>
            将对象转换为布尔型，转换失败返回默认值，默认值false
            </summary>
        </member>
        <member name="M:MechTE_480.ConvertCategory.MConvertUtil.ConvertBase(System.String,System.Int32,System.Int32)">
            <summary>
            实现2,8,10,16进制数间的转换
            </summary>
            <param name="value">原值</param>
            <param name="from">原值的进制,只能是2,8,10,16四个值</param>
            <param name="to">要转换到的目标进制，只能是2,8,10,16四个值</param>
        </member>
        <member name="M:MechTE_480.ConvertCategory.MConvertUtil.HexToAscii(System.String)">
            <summary>
            将16进制字符转为ASCII字符
            </summary>
            <param name="hex">16个数字（0-9和A-F）来表示</param>
            <returns>ASCII字符</returns>
        </member>
        <member name="M:MechTE_480.ConvertCategory.MConvertUtil.MHexToAscii(System.String)">
            <summary>
            将16进制字符转为ASCII字符
            </summary>
            <param name="hex">16个数字（0-9和A-F）来表示</param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.ConvertCategory.MConvertUtil.AsciiStrToHexStr(System.String)">
            <summary>
            ASCII字符转为16进制字符
            </summary>
            <param name="value">转换值</param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.ConvertCategory.MConvertUtil.MAsciiStrToHexStr(System.String)">
            <summary>
            ASCII字符转为16进制字符
            </summary>
            <param name="value">转换值</param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.ConvertCategory.MConvertUtil.HexToAsciiHex(System.String)">
            <summary>
            将16进制字符转为ASCII16进制字符
            </summary>
            <param name="value">16进制字符</param>
            <returns>示例：76312E342E30 > 373633313245333432453330</returns>
        </member>
        <member name="M:MechTE_480.ConvertCategory.MConvertUtil.ToBytes(System.String,System.Text.Encoding)">
            <summary>
            使用指定字符集将string转换成byte[]
            </summary>
            <param name="value">要转换的字符串</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:MechTE_480.ConvertCategory.MConvertUtil.BytesToString(System.Byte[],System.Text.Encoding)">
            <summary>
            将byte[]转换成string
            </summary>
            <param name="bytes">要转换的字节数组</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:MechTE_480.ConvertCategory.MConvertUtil.StringToByteArray(System.String)">
            <summary>
            将字符串转换为字节数组
            示例："ABCDEF" -> [ 0xAB, 0xCD, 0xEF ]
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.ConvertCategory.MConvertUtil.ByteArr2HexStrings(System.Byte[],System.String)">
            <summary>
            示例：[ "AB", "CD", "EF" ] -> "AB{separator}CD{separator}EF"
            </summary>
            <param name="bytes"></param>
            <param name="separator">分隔符</param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.ConvertCategory.MConvertUtil.ByteArrayToHexStrings(System.Collections.Generic.List{System.Byte},System.String)">
            <summary>
            将字节数组转换为十六进制字符串
            示例：[ "AB", "CD", "EF" ] -> "AB{separator}CD{separator}EF"
            </summary>
            <param name="bytes"></param>
            <param name="separator">分隔符</param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.ConvertCategory.MConvertUtil.NumberStrToIntArray(System.String)">
            <summary>
            将数字类型字符串转int数组
            </summary>
            <param name="ar">数字字符用空格分割</param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.ConvertCategory.MConvertUtil.ByteToHex(System.Byte[])">
            <summary>
            Byte数组转16进制字符串
            </summary>
            <param name="bytes">Byte数组</param>
            <returns>16进制字符串</returns>
        </member>
        <member name="M:MechTE_480.ConvertCategory.MConvertUtil.ByteToHex(System.Byte[],System.String)">
            <summary>
            通过给定的索引，从字节数组中提取特定位置的字节，并将其转换为十六进制字符串
            </summary>
            <param name="bytes">Byte数组</param>
            <param name="index">Byte数组索引数组</param>
            <returns>16进制字符串</returns>
        </member>
        <member name="M:MechTE_480.ConvertCategory.MConvertUtil.ToHidFormat(System.String)">
            <summary>
            将字符转换HID指令格式 (name=0021032334 > 00 21 03 23 34)
            </summary>
            <param name="value"></param>
            <returns>string</returns>
        </member>
        <member name="M:MechTE_480.ConvertCategory.MConvertUtil.MToHidFormat(System.String)">
            <summary>
            将字符转换HID指令格式 (name=0021032334 > 00 21 03 23 34)
            </summary>
            <param name="value"></param>
            <returns>string</returns>
        </member>
        <member name="T:MechTE_480.DateTimeCategory.MDateTimeUtil">
            <summary>
            时间类操作
            </summary>
        </member>
        <member name="M:MechTE_480.DateTimeCategory.MDateTimeUtil.GetTime">
            <summary>
            获取当前日期 yyyy-MM-dd
            </summary>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.DateTimeCategory.MDateTimeUtil.GetYesterdayTime">
            <summary>
            获取前一天时间 yyyy-MM-dd
            </summary>
            <returns></returns>
        </member>
        <member name="T:MechTE_480.Files.MFile">
            <summary>
            文件操作类
            </summary>
        </member>
        <member name="M:MechTE_480.Files.MFile.ShellExecute(System.IntPtr,System.Text.StringBuilder,System.Text.StringBuilder,System.Text.StringBuilder,System.Text.StringBuilder,System.Int32)">
            <summary>
            使用DllImport指定调用的Windows API函数及其相关信息
            </summary>
            <param name="hwnd">指定父窗口句柄:ntPtr.Zero</param>
            <param name="lpszOp">指定要进行的操作:Open</param>
            <param name="lpszFile">指定要打开的文件名|路径</param>
            <param name="lpszParams">指定命令行参数: 0 | ""</param>
            <param name="lpszDir">用于指定默认目录:0 | ""</param>
            <param name="fsShowCmd">显示模式: 0:隐藏 1~11</param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.Files.MFile.OpenFile(System.String,System.Int32)">
            <summary>
            开启程序/文件夹
            </summary>
            <param name="path">路径</param>
            <param name="fsShow">是否显示窗口 默认显示(1)</param>
        </member>
        <member name="M:MechTE_480.Files.MFile.OpenProcessFile(System.String)">
            <summary>
            使用Process类的Start方法启动外部程序/文件夹
            </summary>
            <param name="path">路径</param>
        </member>
        <member name="M:MechTE_480.Files.MFile.CopyFile(System.String,System.String)">
            <summary>
            复制文件夹及文件
            </summary>
            <param name="sourceFolder">原文件路径</param>
            <param name="destFolder">目标文件路径</param>
            <returns>1 || -1</returns>
        </member>
        <member name="M:MechTE_480.Files.MFile.CopyFolder(System.String,System.String)">
            <summary>
            复制文件夹(递归)
            </summary>
            <param name="varFromDirectory">源文件夹路径</param>
            <param name="varToDirectory">目标文件夹路径</param>
        </member>
        <member name="M:MechTE_480.Files.MFile.Copy(System.String,System.String)">
            <summary>
            将源文件的内容复制到目标文件中并覆盖
            </summary>
            <param name="sourceFilePath">源文件的绝对路径</param>
            <param name="destFilePath">目标文件的绝对路径</param>
        </member>
        <member name="M:MechTE_480.Files.MFile.FileMove(System.String,System.String)">
            <summary>
            移动文件
            </summary>
            <param name="orignFile">原始路径</param>
            <param name="newFile">新路径</param>
        </member>
        <member name="M:MechTE_480.Files.MFile.CopyDir(System.String,System.String)">
            <summary>
            指定文件夹下面的所有内容copy到目标文件夹下面
            </summary>
            <param name="srcPath">原始路径</param>
            <param name="aimPath">目标文件夹</param>
        </member>
        <member name="M:MechTE_480.Files.MFile.FileDialog">
            <summary>
            窗体浏览文件对话框
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:MechTE_480.Files.MFile.GetFileName(System.String)">
            <summary>
            从文件的绝对路径中获取文件名( 包含扩展名 )
            </summary>
            <param name="filePath">文件的绝对路径</param>        
        </member>
        <member name="M:MechTE_480.Files.MFile.QueryFile(System.String)">
            <summary>
            获取指定目录文件夹
            </summary>
            <param name="path">文件路径</param>
            <returns>文件名,文件路径</returns>
        </member>
        <member name="M:MechTE_480.Files.MFile.GetFile(System.String)">
            <summary>
            获取指定目录文件夹
            </summary>
            <param name="path">文件路径</param>
            <returns>文件名,文件路径</returns>
        </member>
        <member name="M:MechTE_480.Files.MFile.GetFileNames(System.String)">
            <summary>
            获取指定目录中所有文件列表
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>        
        </member>
        <member name="M:MechTE_480.Files.MFile.GetDirectories(System.String)">
            <summary>
            获取指定目录中所有子目录列表
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>        
        </member>
        <member name="M:MechTE_480.Files.MFile.GetFileNames(System.String,System.String,System.Boolean)">
            <summary>
            获取指定目录及子目录中所有文件列表
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
            <param name="searchPattern">模式字符串，"*"代表0或N个字符，"?"代表1个字符。
            范例："Log*.xml"表示搜索所有以Log开头的Xml文件。</param>
            <param name="isSearchChild">是否搜索子目录</param>
        </member>
        <member name="M:MechTE_480.Files.MFile.DelFile(System.String)">
            <summary>
            删除指定的文件
            </summary>
            <param name="path">路径</param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.Files.MFile.DeleteFolderFiles(System.String,System.String)">
            <summary>
            删除指定文件夹对应其他文件夹里的文件
            </summary>
            <param name="varFromDirectory">指定文件夹路径</param>
            <param name="varToDirectory">对应其他文件夹路径</param>
        </member>
        <member name="M:MechTE_480.Files.MFile.DeleteDirectory(System.String)">
            <summary>
            删除指定目录及其所有子目录
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
        </member>
        <member name="M:MechTE_480.Files.MFile.ClearFile(System.String)">
            <summary>
            清空文件内容
            </summary>
            <param name="filePath">文件的绝对路径</param>
        </member>
        <member name="M:MechTE_480.Files.MFile.IsExistDirectory(System.String)">
            <summary>
            检测指定目录是否存在
            </summary>
            <param name="directoryPath">目录的绝对路径</param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.Files.MFile.IsExistFile(System.String)">
            <summary>
            检测指定文件是否存在
            </summary>
            <param name="filePath">文件的绝对路径</param>        
        </member>
        <member name="M:MechTE_480.Files.MFile.IsEmptyDirectory(System.String)">
            <summary>
            检测指定目录是否为空
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>        
        </member>
        <member name="M:MechTE_480.Files.MFile.Contains(System.String,System.String)">
            <summary>
            检测指定目录中是否存在指定的文件,若要搜索子目录请使用重载方法.
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
            <param name="searchPattern">模式字符串，"*"代表0或N个字符，"?"代表1个字符。
            范例："Log*.xml"表示搜索所有以Log开头的Xml文件。</param>        
        </member>
        <member name="M:MechTE_480.Files.MFile.Contains(System.String,System.String,System.Boolean)">
            <summary>
            检测指定目录中是否存在指定的文件
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
            <param name="searchPattern">模式字符串，"*"代表0或N个字符，"?"代表1个字符。
            范例："Log*.xml"表示搜索所有以Log开头的Xml文件。</param> 
            <param name="isSearchChild">是否搜索子目录</param>
        </member>
        <member name="M:MechTE_480.Files.MFile.ExistsFile(System.String)">
            <summary>
            检查文件,如果文件不存在则创建  
            </summary>
            <param name="filePath">路径,包括文件名</param>
        </member>
        <member name="M:MechTE_480.Files.MFile.CreateDirectory(System.String)">
            <summary>
            创建一个目录
            </summary>
            <param name="directoryPath">目录的绝对路径</param>
        </member>
        <member name="M:MechTE_480.Files.MFile.CreateFile(System.String)">
            <summary>
            创建一个文件
            </summary>
            <param name="filePath">文件的绝对路径</param>
        </member>
        <member name="M:MechTE_480.Files.MFile.CreateFile(System.String,System.Byte[])">
            <summary>
            创建一个文件,并将字节流写入文件。
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <param name="buffer">二进制流数据</param>
        </member>
        <member name="M:MechTE_480.Files.MFile.FolderCreate(System.String,System.String)">
            <summary>
            在当前目录下创建目录
            </summary>
            <param name="orignFolder">当前目录</param>
            <param name="newFloder">新目录</param>
        </member>
        <member name="M:MechTE_480.Files.MFile.FolderCreate(System.String)">
            <summary>
            创建文件夹
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:MechTE_480.Files.MFile.GetLineCount(System.String)">
            <summary>
            获取文本文件的行数
            </summary>
            <param name="filePath">文件的绝对路径</param>        
        </member>
        <member name="M:MechTE_480.Files.MFile.GetFileSize(System.String)">
            <summary>
            获取一个文件的长度,单位为Byte
            </summary>
            <param name="filePath">文件的绝对路径</param>        
        </member>
        <member name="M:MechTE_480.Files.MFile.GetDirectories(System.String,System.String,System.Boolean)">
            <summary>
            获取指定目录及子目录中所有子目录列表
            </summary>
            <param name="directoryPath">指定目录的绝对路径</param>
            <param name="searchPattern">模式字符串，"*"代表0或N个字符，"?"代表1个字符。
            范例："Log*.xml"表示搜索所有以Log开头的Xml文件。</param>
            <param name="isSearchChild">是否搜索子目录</param>
        </member>
        <member name="M:MechTE_480.Files.MFile.GetFileNameNoExtension(System.String)">
            <summary>
            从文件的绝对路径中获取文件名( 不包含扩展名 )
            </summary>
            <param name="filePath">文件的绝对路径</param>        
        </member>
        <member name="M:MechTE_480.Files.MFile.GetExtension(System.String)">
            <summary>
            从文件的绝对路径中获取扩展名
            </summary>
            <param name="filePath">文件的绝对路径</param>        
        </member>
        <member name="M:MechTE_480.Files.MFile.ReadFile(System.String)">
            <summary>
            读文件内容
            </summary>
            <param name="path">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.Files.MFile.GetDirectoryLength(System.String)">
            <summary>
            获取文件夹大小
            </summary>
            <param name="dirPath">文件夹路径</param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.Files.MFile.GetFileAttribute(System.String)">
            <summary>
            获取指定文件详细属性
            </summary>
            <param name="filePath">文件详细路径</param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.Files.MFile.GetFiles(System.IO.DirectoryInfo,System.String,System.Collections.Generic.List{System.String}@)">
            <summary>
            获取指定目录下所有符合指定模式的文件名..
            </summary>
            <param name="directory">指定目录。</param>
            <param name="pattern">指定模式。</param>
            <param name="fileList">符合指定模式的文件名列表。</param>
        </member>
        <member name="M:MechTE_480.Files.MFile.GetFiles(System.IO.DirectoryInfo,System.String,System.Collections.Generic.List{System.String}@,System.Boolean)">
            <summary>
            获取指定目录下符合指定模式的文件名和文件夹名。
            </summary>
            <param name="directory">指定目录。</param>
            <param name="pattern">指定模式。</param>
            <param name="fileList">符合指定模式的文件和文件夹名称列表。</param>
            <param name="recursive">是否递归获取子文件夹中的文件和文件夹，true表示递归获取。</param>
        </member>
        <member name="M:MechTE_480.Files.MFile.GetDesktop(System.Object)">
            <summary>
            读取桌面内容(electron)
            </summary>
        </member>
        <member name="M:MechTE_480.Files.MFile.WriteText(System.String,System.String,System.Text.Encoding)">
            <summary>
            向文本文件中写入内容
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <param name="text">写入的内容</param>
            <param name="encoding">编码</param>
        </member>
        <member name="M:MechTE_480.Files.MFile.AppendText(System.String,System.String)">
            <summary>
            向文本文件的尾部追加内容
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <param name="content">写入的内容</param>
        </member>
        <member name="M:MechTE_480.Files.MFile.WriteFile(System.String,System.String)">
            <summary>
            写文件
            </summary>
            <param name="path">文件路径</param>
            <param name="strings">文件内容</param>
        </member>
        <member name="M:MechTE_480.Files.MFile.FileAdd(System.String,System.String)">
            <summary>
            追加文件内容
            </summary>
            <param name="path">文件路径</param>
            <param name="strings">内容</param>
        </member>
        <member name="T:MechTE_480.Files.MFileTransfer">
            <summary>
            定制化文件传输(上传,下载)不通用
            </summary>
            <summary>
            定制化文件传输(上传,下载)不通用
            </summary>
        </member>
        <member name="M:MechTE_480.Files.MFileTransfer.DownloadZip(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            zip压缩包下载
            下载完成后自动执行解压动作,需传入解压路径unPath
            解压完成自动根据downloadName字段删除zip包
            </summary>
            <param name="httpPath">HTTP POST请求路径</param>
            <param name="mode">模式:EngineeringMode(工程),TestItem(量产) </param>
            <param name="zipPath">下载文件到指定路径,不允许为空</param>
            <param name="unPath">解压到指定路径,如空则解压到当前程序集的执行路径(根目录)</param>
            <param name="downloadName">文件名称(必须跟后台上传文件名匹配)</param>
            <returns>bool</returns>
        </member>
        <member name="M:MechTE_480.Files.MFileTransfer.DownloadZip(System.String,System.String,System.String,System.String)">
            <summary>
            zip压缩包下载
            </summary>
            <param name="httpPath">HTTP POST请求路径</param>
            <param name="mode">模式:EngineeringMode(工程),TestItem(量产) </param>
            <param name="zipPath">下载文件到指定路径,不允许为空</param>
            <param name="downloadName">文件名称(必须跟后台上传文件名匹配)</param>
            <returns>bool</returns>
        </member>
        <member name="M:MechTE_480.Files.MFileTransfer.UploadZip(System.String,System.String)">
            <summary>
            zip文件上传1
            </summary>
            <param name="httpPath">HTTP POST请求路径</param>
            <param name="zipPath">指定zip文件上传的路径</param>
            <returns>bool</returns>
        </member>
        <member name="M:MechTE_480.Files.MFileTransfer.HttpPost(System.String,System.String,System.String,System.String)">
            <summary>
            通过HTTP下载
            </summary>
            <param name="httpUrl">HTTP请求路径</param>
            <param name="writeData">JSON格式属性</param>
            <param name="method">请求</param>
            <param name="path">下载到指定路径</param>
            <returns>bool</returns>
        </member>
        <member name="M:MechTE_480.Files.MFileTransfer.ExtractZipFile(System.String,System.String)">
            <summary>
            解压文件.
            </summary>
            <param name="zipFilePath">要解压的zip</param>
            <param name="extractPath">解压到指定路径</param>
        </member>
        <member name="T:MechTE_480.Files.MIni">
            <summary>
            ini文件操作类
            </summary>
        </member>
        <member name="M:MechTE_480.Files.MIni.Read(System.String,System.String,System.String)">
            <summary>
            读取ini
            </summary>
            <param name="section">ini文件[xxxx]头部标识</param>
            <param name="key">键名</param>
            <param name="path">文件路径</param>
            <returns>string</returns>
        </member>
        <member name="M:MechTE_480.Files.MIni.ReadArray(System.String,System.String,System.String)">
            <summary>
            读取ini string[],key对应的value值以,分割
            </summary>
            <param name="section">ini文件[xxxx]头部标识</param>
            <param name="key">key</param>
            <param name="path">文件路径</param>
            <returns>string[]</returns>
        </member>
        <member name="M:MechTE_480.Files.MIni.Update(System.String,System.String,System.String,System.String)">
            <summary>
            更新ini
            </summary>
            <param name="section">ini文件[xxxx]头部标识</param>
            <param name="key">key名</param>
            <param name="value">写入的值</param>
            <param name="path">完整的ini文件名路径</param>
        </member>
        <member name="M:MechTE_480.Files.MIni.Delete(System.String)">
            <summary>
            删除一个INI文件
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:MechTE_480.Files.MIni.ClearAllSection(System.String)">
            <summary>
            删除ini文件下所有段落
            </summary>
        </member>
        <member name="M:MechTE_480.Files.MIni.ClearSection(System.String,System.String)">
            <summary>
            删除ini文件下personal段落下的所有键
            </summary>
            <param name="Section"></param>
            <param name="filePath"></param>
        </member>
        <member name="M:MechTE_480.Files.MIni.GetPrivateProfileString(System.String,System.String,System.String,System.Text.StringBuilder,System.Int32,System.String)">
            <summary>
            读取ini
            </summary>
            <param name="section">ni文件 [xxxx] 头部标识</param>
            <param name="key">key名</param>
            <param name="def">如果ini文件中没有前两个参数指定的字段名或键名,则将此值赋给变量</param>
            <param name="retVal">得到的值</param>
            <param name="size">大小</param>
            <param name="iniPath">完整的ini文件名路径</param>
            <returns></returns>
            声明INI文件的读操作函数 GetPrivateProfileString()
        </member>
        <member name="M:MechTE_480.Files.MIni.WritePrivateProfileString(System.String,System.String,System.String,System.String)">
            <summary>
            写入ini.
            </summary>
            <param name="section">ini文件 [xxxx] 头部标识</param>
            <param name="key">key名</param>
            <param name="val">写入的值</param>
            <param name="filePath">完整的ini文件名路径</param>
            <returns></returns>
            声明INI文件的写操作函数 WritePrivateProfileString()
        </member>
        <member name="T:MechTE_480.btnForm.MButton">
            <summary>
            弹窗按键测试类
            </summary>
        </member>
        <member name="M:MechTE_480.btnForm.MButton.ButtonTest(MechTE_480.PortCategory.hid.MHidUtil,System.Action,System.String,System.String)">
            <summary>
            按键测试
            </summary>
            <param name="command">command对象</param>
            <param name="action">下指令并且获取回传值的整个动作（下指令并且获取回传值事件）例：()=>{ command.WriteSendReturn() } </param>
            <param name="readData">按键操作对应指令返回值</param>
            <param name="name">按键操作对应窗口名</param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.btnForm.MButton.ButtonTest(System.Func{System.Boolean},System.String)">
            <summary>
            按键测试
            </summary>
            <param name="func">传入方法, _button.ButtonTest(() =&gt; BtnTest("0x01"), "请按Teams键")) </param>
            <param name="name">窗口名</param>
            <returns></returns>
        </member>
        <member name="F:MechTE_480.btnForm.ProgressBars.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:MechTE_480.btnForm.ProgressBars.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:MechTE_480.btnForm.ProgressBars.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:MechTE_480.FormCategory.MFormUtil">
            <summary>
            常用窗体
            </summary>
        </member>
        <member name="F:MechTE_480.FormCategory.MFormUtil.X">
            <summary>
            定义当前窗体的宽度
            </summary>
        </member>
        <member name="F:MechTE_480.FormCategory.MFormUtil.Y">
            <summary>
            定义当前窗体的高度
            </summary>
        </member>
        <member name="M:MechTE_480.FormCategory.MFormUtil.SendMessage(System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
            定义鼠标点击窗体移动
            </summary>
            <param name="hWnd"></param>
            <param name="msg"></param>
            <param name="wParam"></param>
            <param name="lParam"></param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.FormCategory.MFormUtil.SetTag(System.Windows.Forms.Control)">
            <summary>
            控件大小随窗体大小等比例缩放,
            在窗体重载中使用 >>  MForm.X = this.Width; MForm.Y = this.Height;  MForm.SetTag(this);
            </summary>
            <param name="cons"></param>
        </member>
        <member name="M:MechTE_480.FormCategory.MFormUtil.SetControls(System.Single,System.Single,System.Windows.Forms.Control)">
            <summary>
            设置缩放,在Resize事件中使用 >>
             float newX = this.Width / MForm.X;
             float newY = this.Height / MForm.Y;
             MForm.SetControls(newX,newY,this);
            </summary>
            <param name="newX">X轴</param>
            <param name="newY">Y轴</param>
            <param name="cons"></param>
        </member>
        <member name="M:MechTE_480.FormCategory.MFormUtil.MesBox(System.String,System.String)">
            <summary>
            默认弹框提示(确认/取消)
            </summary>
            <param name="name">描述</param>
            <param name="title">标题</param>
            <returns>bool</returns>
        </member>
        <member name="M:MechTE_480.FormCategory.MFormUtil.ShowErr(System.String,System.String)">
            <summary>
            错误提示(确认)
            </summary>
            <param name="title">标题</param>
            <param name="prompt">描述</param>
        </member>
        <member name="M:MechTE_480.FormCategory.MFormUtil.ShowInputDialog(System.String,System.String)">
            <summary>
            弹窗接收参数(确认/取消)..
            </summary>
            <param name="title">标题</param>
            <param name="prompt">描述</param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.FormCategory.MFormUtil.MoveForm(System.IntPtr)">
            <summary>
            鼠标按住窗体移动,先调用 Capture = false; MForm.MoveForm(Handle);
            </summary>
            <param name="handle"></param>
        </member>
        <member name="M:MechTE_480.FormCategory.MFormUtil.ShowDialog(System.String)">
            <summary>
            通过图形用户界面选择一个文件夹
            </summary>
            <param name="description">描述</param>
            <returns></returns>
        </member>
        <member name="T:MechTE_480.LogCategory.MLogUtil">
            <summary>
            写本地log文本数据
            </summary>
        </member>
        <member name="M:MechTE_480.LogCategory.MLogUtil.LogWrite(System.String,System.String,System.String)">
            <summary>
            写入本地log,自动生成当前时间
            </summary>
            <param name="paths">写入log路径</param>
            <param name="name">log文件名称</param>
            <param name="value">写入内容</param>
        </member>
        <member name="M:MechTE_480.LogCategory.MLogUtil.LogWriteYesterdayTime(System.String,System.String,System.String)">
            <summary>
            写入本地log,自动生成前一天时间
            </summary>
            <param name="paths"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="T:MechTE_480.TemplateCategory.MTemplate">
            <summary>
            模板程序定制的功能
            </summary>
        </member>
        <member name="M:MechTE_480.TemplateCategory.MTemplate.IsBzp(System.String)">
            <summary>
            检查SN是否是标准品条码,自动转换大写
            </summary>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.TemplateCategory.MTemplate.MIsBzp(System.String)">
            <summary>
            检查SN是否是标准品条码,自动转换大写
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.TemplateCategory.MTemplate.MStrTrue(System.String)">
            <summary>
            返回字符串True
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:MechTE_480.TemplateCategory.IMerryDll">
            <summary>
            模板函数接口
            </summary>
        </member>
        <member name="M:MechTE_480.TemplateCategory.IMerryDll.StartRun">
            <summary>
            程序每次开始运行时触发
            </summary>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.TemplateCategory.IMerryDll.Start(System.Collections.Generic.List{System.String},System.IntPtr)">
            <summary>
            程序启动时第三个触发的接口，运作代码可以自定义，返回 false表示程序不允许启动
            </summary>
            <param name="formsData">数据集合（本dll被实例化为主程序中对象，所以主程序formsData与本参数，以及本参数赋值后的参数，指向同一堆对象）</param>
            <param name="handel">主程序主窗体句柄</param>
            <returns>启动是否成功</returns>
        </member>
        <member name="M:MechTE_480.TemplateCategory.IMerryDll.Run(System.String)">
            <summary>
            调用内部方法
            </summary>
            <param name="message">指令，决定调用哪个方法</param>
            <returns>方法调用后回传值</returns>
        </member>
        <member name="M:MechTE_480.TemplateCategory.IMerryDll.Interface(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            模板中的全局变量,
            接收如BD号，SN，测试站别、机型、客户SN、测试计划、测试值、测试结果等等，详细参数可参照Config字典.xlsx 
            </summary>
            <param name="keys"></param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.TemplateCategory.IMerryDll.GetDllInfo">
            <summary>
            版本信息接口
            </summary>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.TemplateCategory.IMerryDll.TestsEnd(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:MechTE_480.PortCategory.hid.MHidUtil">
            <summary>
            HID指令帮助类
            </summary>
            <summary>
            获取句柄类
            </summary>
        </member>
        <member name="F:MechTE_480.PortCategory.hid.MHidUtil.ReturnValue">
            <summary>
            存储回传值
            </summary>
        </member>
        <member name="F:MechTE_480.PortCategory.hid.MHidUtil.ReturnAllValue">
            <summary>
            存储全部回传值
            </summary>
        </member>
        <member name="M:MechTE_480.PortCategory.hid.MHidUtil.WriteSend(System.String,System.Int32,System.IntPtr)">
            <summary>
            使用write下下指令
            </summary>
            <param name="command">指令06 00 05...</param>
            <param name="length">指令长度</param>
            <param name="intPtr">装置句柄(如果没有调用GetHandle获取)</param>
            <returns>指令是否下成功</returns>
        </member>
        <member name="M:MechTE_480.PortCategory.hid.MHidUtil.GetReportSend(System.String,System.Int32,System.IntPtr)">
            <summary>
            使用 getReport下指令
            </summary>
            <param name="command">指令06 00 05...</param>
            <param name="length">指令长度</param>
            <param name="intPtr">句柄指针</param>
            <returns>指令是否下成功</returns>
        </member>
        <member name="M:MechTE_480.PortCategory.hid.MHidUtil.SetReportSend(System.String,System.Int32,System.IntPtr)">
            <summary>
            使用setReport下指令
            </summary>
            <param name="command">指令06 00 05...</param>
            <param name="length">指令长度</param>
            <param name="intPtr">句柄指针</param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.PortCategory.hid.MHidUtil.SetFeatureSend(System.String,System.Int32,System.IntPtr)">
            <summary>
            使用SetFeature下指令
            </summary>
            <param name="command">指令06 00 05...</param>
            <param name="length">指令长度</param>
            <param name="intPtr">句柄指针</param>
            <returns>指令是否下成功</returns>
        </member>
        <member name="M:MechTE_480.PortCategory.hid.MHidUtil.WriteReturn(System.String,System.Int32,System.String,System.String,System.String,System.IntPtr)">
            <summary>
            使用write下指令,返回值存储到ReturnValue
            </summary>
            <param name="command">指令06 00 05...</param>
            <param name="length">指令长度</param>
            <param name="readData">指定匹配的值</param>
            <param name="index">指令返回值索引0 1 2 3...</param>
            <param name="handle">句柄路径</param>
            <param name="intPtr">句柄指针</param>
            <returns>指令是否下成功</returns>
        </member>
        <member name="M:MechTE_480.PortCategory.hid.MHidUtil.SetReportReturn(System.String,System.Int32,System.String,System.String,System.String,System.IntPtr)">
            <summary>
            使用setReport下下指令并且存储回传值到ReturnValue
            </summary>
            <param name="command">指令06 00 05...</param>
            <param name="length">指令长度</param>
            <param name="readData">指定匹配的值</param>
            <param name="index">指令返回值索引</param>
            <param name="handle">句柄地址</param>
            <param name="intPtr">句柄指针</param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.PortCategory.hid.MHidUtil.GetFeatureReturn(System.String,System.Int32,System.IntPtr,System.String)">
            <summary>
            使用GetFeature下下指令對外方法并且存储回传值到ReturnValue
            </summary>
            <param name="command">指令</param>
            <param name="length">指令長度</param>
            <param name="intPtr">通道</param>
            <param name="indexes">返回下標值</param>
            <returns>返回读取的值</returns>
        </member>
        <member name="M:MechTE_480.PortCategory.hid.MHidUtil.GetReportReturn(System.String,System.Int32,System.IntPtr,System.String)">
            <summary>
            使用getReport下指令并且存储回传值到 ReturnValue
            </summary>
            <param name="command">指令</param>
            <param name="length">指令長度</param>
            <param name="intPtr">通道</param>
            <param name="indexes">返回下標值</param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.PortCategory.hid.MHidUtil.IsReturnValue(System.String,System.String,System.Int32)">
            <summary>
            直接获取指定句柄回传值
            </summary>
            <param name="handle">句柄地址</param>
            <param name="index"></param>
            <param name="length">句柄流数组长度</param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.PortCategory.hid.MHidUtil.DeleteDriver(System.Collections.Generic.List{System.String})">
            <summary>
            删除驱动
            </summary>
            <param name="pid"></param>
            <returns></returns>
        </member>
        <member name="F:MechTE_480.PortCategory.hid.MHidUtil.IntLen">
            <summary>
            定义数组长度,句柄对象,循环次数
            如有增加长度,同步新增col01
            </summary>
        </member>
        <member name="F:MechTE_480.PortCategory.hid.MHidUtil.SetHandle1">
            <summary>
            存储的句柄对象数组通道1
            </summary>
        </member>
        <member name="F:MechTE_480.PortCategory.hid.MHidUtil.SetHandle2">
            <summary>
             存储的句柄对象数组通道2
            </summary>
        </member>
        <member name="F:MechTE_480.PortCategory.hid.MHidUtil.SetPath1">
            <summary>
             存储的句柄地址通道1
            </summary>
        </member>
        <member name="F:MechTE_480.PortCategory.hid.MHidUtil.SetPath2">
            <summary>
             存储的句柄地址通道2
            </summary>
        </member>
        <member name="M:MechTE_480.PortCategory.hid.MHidUtil.CloseHandle(System.IntPtr)">
            <summary>
            关闭访问设备句柄，结束进程的时候把这个加上保险点
            </summary>
            <param name="hFile"></param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.PortCategory.hid.MHidUtil.HidD_GetHidGuid(System.Guid@)">
            <summary>
            获得GUID
            </summary>
            <param name="hidGuid"></param>
        </member>
        <member name="F:MechTE_480.PortCategory.hid.MHidUtil.Handle">
            <summary>
            句柄
            </summary>
        </member>
        <member name="F:MechTE_480.PortCategory.hid.MHidUtil.Path">
            <summary>
            Path
            </summary>
        </member>
        <member name="M:MechTE_480.PortCategory.hid.MHidUtil.GetHidDevicePath(System.String,System.String,System.String,System.String)">
            <summary>
            获取双通道装置路径
            </summary>
            <param name="pid01"></param>
            <param name="vid01"></param>
            <param name="pid02"></param>
            <param name="vid02"></param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.PortCategory.hid.MHidUtil.GetHidDevicePath(System.String,System.String)">
            <summary>
            获取单通道装置路径
            </summary>
            <param name="pid01"></param>
            <param name="vid01"></param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.PortCategory.hid.MHidUtil.GetHidDevicePath(System.String,System.String,System.String)">
             <summary>
            获取单通道装置路径
             </summary>
             <param name="pid"></param>
             <param name="vid"></param>
             <param name="col"></param>
             <returns></returns>
        </member>
        <member name="T:MechTE_480.PortCategory.hid.MHidUtil.SpDeviceInfoData">
            <summary>
            SpDeviceInfoData
            </summary>
        </member>
        <member name="M:MechTE_480.PortCategory.hid.MHidUtil.HexToByteArray(System.String,System.Int32)">
            <summary>
            將16進制字符串轉換為16进制byte數組并且根据数组长度自动补0
            </summary>
            <param name="shex">要转换的16进制字符串</param>
            <param name="length">要转换的Byte数组长度</param>
            <returns>转换后的Byte数组，自动补0</returns>
        </member>
        <member name="M:MechTE_480.PortCategory.hid.MHidUtil.GetHandle(System.String,System.String,System.String,System.String)">
            <summary>
            获取双通道装置路径,传入参数不能为空
            </summary>
            <param name="pid01">如:a520</param>
            <param name="vid01">如:413c</param>
            <param name="pid02"></param>
            <param name="vid02"></param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.PortCategory.hid.MHidUtil.GetHandle(System.String,System.String)">
            <summary>
            获取单通道装置路径
            </summary>
            <param name="pid01">如:a520</param>
            <param name="vid01">如:413c</param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.PortCategory.hid.MHidUtil.GetHandle(System.String,System.String,System.String)">
            <summary>
            获取单通道装置路径
            </summary>
            <param name="pid">如:a520</param>
            <param name="vid">如:413c</param>
            <param name="col">指定col通道 , 特殊情况匹配pid</param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.PortCategory.hid.MHidUtil.CloseHandle">
            <summary>
             释放所有通道句柄和路径
            </summary>
        </member>
        <member name="T:MechTE_480.PortCategory.usb.MUsb">
            <summary>
            USB端口类
            </summary>
        </member>
        <member name="M:MechTE_480.PortCategory.usb.MUsb.GetDeviceName(System.UInt16,System.UInt16,System.String)">
            <summary>
            装置USB装置名称
            </summary>
            <param name="vendorId">供应商标识VID</param>
            <param name="productId">产品编号PID</param>
            <param name="names">匹配装置名称</param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.PortCategory.usb.MUsb.IsDevice(System.String)">
            <summary>
            检测USB播放装置是否存在
            </summary>
            <param name="deviceName">装置名称(DeviceID:PID_A527)</param>
            <returns></returns>
        </member>
        <member name="T:MechTE_480.PortCategory.MSerialPort">
            <summary>
            串口工具类操作
            </summary>
        </member>
        <member name="E:MechTE_480.PortCategory.MSerialPort.DataReceived">
            <summary>
            事件，用于通知接收到的数据
            </summary>
        </member>
        <member name="M:MechTE_480.PortCategory.MSerialPort.#ctor(System.String,System.Int32,System.IO.Ports.Parity,System.Int32,System.IO.Ports.StopBits)">
            <summary>
            对象初始化
            </summary>
            <param name="portName">COM3</param>
            <param name="baudRate">9600</param>
            <param name="parity">Parity.None</param>
            <param name="dataBits">8</param>
            <param name="stopBits">StopBits.One</param>
        </member>
        <member name="M:MechTE_480.PortCategory.MSerialPort.OnDataReceived(System.String)">
            <summary>
            确保事件在非UI线程上触发时不会引发异常
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:MechTE_480.PortCategory.MSerialPort.SendData(System.String)">
            <summary>
            写字符串指令
            </summary>
            <param name="data"></param>
            <exception cref="T:System.ApplicationException"></exception>
        </member>
        <member name="M:MechTE_480.PortCategory.MSerialPort.SendData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            写二进制指令
            </summary>
            <param name="data">如:byte[] s1 = { 0x55, 0x01, 0x32, 0x00, 0x00, 0x00, 0x01, 0x89 }</param>
            <param name="f">默认 0</param>
            <param name="l">字节数</param>
            <exception cref="T:System.ApplicationException"></exception>
        </member>
        <member name="M:MechTE_480.PortCategory.MSerialPort.ParseHexString(System.String)">
            <summary>
            16进制字符串转化为字节数组
            </summary>
            <param name="hexString"></param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.PortCategory.MSerialPort.SendHexString(System.String)">
            <summary>
            使用16进制字符串发送数据
            </summary>
            <param name="hexString"></param>
        </member>
        <member name="M:MechTE_480.PortCategory.MSerialPort.GetPortName">
            <summary>
            获取可用串口设备的名称数组
            </summary>
        </member>
        <member name="T:MechTE_480.PortCategory.MRelay32">
            <summary>
            32路继电器类(定制不通用)
            </summary>
        </member>
        <member name="F:MechTE_480.PortCategory.MRelay32.SOff">
            <summary>
            关闭的指令
            </summary>
        </member>
        <member name="F:MechTE_480.PortCategory.MRelay32._vessel">
            <summary>
            判断存储的容器
            </summary>
        </member>
        <member name="M:MechTE_480.PortCategory.MRelay32.command(System.String,System.String)">
            <summary>
            启动指定模板-32
            </summary>
            <param name="portName">COM口</param>
            <param name="number">打开通道的名字用“.”隔开 例子“1.2.3.4.5”</param>
            <returns></returns>
        </member>
        <member name="T:MechTE_480.network.MNetHelper">
            <summary>
            网络工具类
            </summary>
        </member>
        <member name="M:MechTE_480.network.MNetHelper.GetAddressIp">
            <summary>
            获取本地IP
            </summary>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.network.MNetHelper.LANIP">
            <summary>
            获取本机的局域网IP
            </summary>        
        </member>
        <member name="M:MechTE_480.network.MNetHelper.WANIP">
            <summary>
            获取本机在Internet网络的广域网IP
            </summary>        
        </member>
        <member name="M:MechTE_480.network.MNetHelper.GetValidPort(System.String)">
            <summary>
            检查设置的端口号是否正确，并返回正确的端口号,无效端口号返回-1。
            </summary>
            <param name="port">设置的端口号</param>        
        </member>
        <member name="M:MechTE_480.network.MNetHelper.StringToIpAddress(System.String)">
            <summary>
            将字符串形式的IP地址转换成IPAddress对象
            </summary>
            <param name="ip">字符串形式的IP地址</param>        
        </member>
        <member name="M:MechTE_480.network.MNetHelper.GetHostName">
            <summary>
            获取本机的计算机名
            </summary>
        </member>
        <member name="T:MechTE_480.network.SocketClient">
            <summary>
            Socket客户端
            </summary>
        </member>
        <member name="M:MechTE_480.network.SocketClient.#ctor(System.String,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="ip">连接服务器的IP</param>
            <param name="port">连接服务器的端口</param>
        </member>
        <member name="M:MechTE_480.network.SocketClient.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="port">监听当前电脑端口</param>
        </member>
        <member name="M:MechTE_480.network.SocketClient.ConnectServer">
            <summary>
            连接服务器
            </summary>
        </member>
        <member name="M:MechTE_480.network.SocketClient.SendMessage(System.String)">
            <summary>
            发送消息
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:MechTE_480.network.SocketClient.Close">
            <summary>
            关闭
            </summary>
        </member>
        <member name="M:MechTE_480.network.SocketClient.ReceiveMessage">
            <summary>
            接收服务端消息
            </summary>
            <returns></returns>
        </member>
        <member name="T:MechTE_480.network.SocketServer">
            <summary>
            Socket服务端
            </summary>
        </member>
        <member name="M:MechTE_480.network.SocketServer.#ctor(System.String,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="ip">监听的IP</param>
            <param name="port">监听的端口</param>
        </member>
        <member name="M:MechTE_480.network.SocketServer.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="port">监听当前电脑端口</param>
        </member>
        <member name="M:MechTE_480.network.SocketServer.StartListen">
            <summary>
            监控所有发送到此主机的连接请求
            </summary>
        </member>
        <member name="M:MechTE_480.network.SocketServer.ListenClientConnect">
            <summary>
            监听客户端连接
            </summary>
        </member>
        <member name="M:MechTE_480.network.SocketServer.ReceiveMessage(System.Object)">
            <summary>
            接收客户端消息
            </summary>
            <param name="socket">来自客户端的socket</param>
        </member>
        <member name="T:MechTE_480.ProcessCategory.MProcessUtil">
            <summary>
            cmd包装类
            </summary>
            <summary>
            使用进程调用cmd命令或程序
            </summary>
        </member>
        <member name="M:MechTE_480.ProcessCategory.MProcessUtil.ExeBat(System.String)">
            <summary>
            执行Bat
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MechTE_480.ProcessCategory.MProcessUtil.StartApp(System.String,System.Diagnostics.ProcessWindowStyle)">
            <summary>
            进程窗口模式
            </summary>
            <param name="appName">应用程序路径名称</param>
            <param name="style">显示模式</param>
            <returns>bool</returns>
        </member>
        <member name="M:MechTE_480.ProcessCategory.MProcessUtil.StartApp(System.String,System.String,System.Diagnostics.ProcessWindowStyle)">
            <summary>
            启动外部应用程序
            </summary>
            <param name="appName"></param>
            <param name="arguments"></param>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.ProcessCategory.MProcessUtil.GetWiFiPassword(System.String)">
            <summary>
            根据名称获取wifi密码
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.ProcessCategory.MProcessUtil.ExCmd(System.String)">
            <summary>
            执行单个cmd命令获取返回值
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.ProcessCategory.MProcessUtil.ExCmd(System.String[])">
            <summary>
            执行多个cmd,每次都会创建一次进程
            </summary>
            <param name="commands"></param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.ProcessCategory.MProcessUtil.ExCmdWrite(System.String[])">
            <summary>
            单个线程执行多个cmd指令
            </summary>
            <param name="commands"></param>
        </member>
        <member name="M:MechTE_480.ProcessCategory.MProcessUtil.Bat(System.String)">
            <summary>
            执行bat文件
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="M:MechTE_480.ProcessCategory.MProcessUtil.StartApp(System.String)">
            <summary>
            启动应用网站
            </summary>
            <param name="appName">/程序路径</param>
            <returns>bool</returns>
        </member>
        <member name="M:MechTE_480.ProcessCategory.MProcessUtil.StartApps(System.String)">
            <summary>
            在程序目录下启动应用(管理员运行)
            </summary>
            <param name="appName"></param>
        </member>
        <member name="M:MechTE_480.ProcessCategory.MProcessUtil.RestartAsAdministrator">
            <summary>
            重新启动应用程序并请求管理员权限
            </summary>
        </member>
        <member name="T:MechTE_480.Regexs.MRegex">
            <summary>
            操作正则表达式的公共类
            </summary>
        </member>
        <member name="M:MechTE_480.Regexs.MRegex.IsMatch(System.String,System.String)">
            <summary>
            验证输入字符串是否与模式字符串匹配，匹配返回true
            </summary>
            <param name="input">输入字符串</param>
            <param name="pattern">模式字符串</param>        
        </member>
        <member name="M:MechTE_480.Regexs.MRegex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            验证输入字符串是否与模式字符串匹配，匹配返回true
            </summary>
            <param name="input">输入的字符串</param>
            <param name="pattern">模式字符串</param>
            <param name="options">筛选条件</param>
        </member>
        <member name="T:MechTE_480.Util.LoadDllUtil">
            <summary>
            加载DLL
            </summary>
        </member>
        <member name="M:MechTE_480.Util.LoadDllUtil.AssemblyResolve(System.Object,System.ResolveEventArgs)">
            <summary> 在对程序集解释失败时触发 </summary>
        </member>
        <member name="M:MechTE_480.Util.LoadDllUtil.RegistDll">
            <summary> 注册资源中的dll </summary>
        </member>
        <member name="T:MechTE_480.Util.MMeasure">
            <summary>
            测量代码的执行时间
            </summary>
        </member>
        <member name="M:MechTE_480.Util.MMeasure.#ctor(System.Action{System.TimeSpan})">
            <summary>
            测量代码的执行时间
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:MechTE_480.Util.MMeasure.Dispose">
            <summary>
            释放资源,该类实现了IDisposable接口，在代码块结束时自动释放资源
            </summary>
        </member>
        <member name="T:MechTE_480.util.MEncrypt">
            <summary>
            DES加密/解密类。
            </summary>
        </member>
        <member name="M:MechTE_480.util.MEncrypt.Encrypt(System.String)">
            <summary>
            md5加密
            </summary>
            <param name="Text"></param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.util.MEncrypt.Encrypt(System.String,System.String)">
            <summary> 
            md5加密数据 
            </summary> 
            <param name="Text"></param> 
            <param name="sKey"></param> 
            <returns></returns> 
        </member>
        <member name="M:MechTE_480.util.MEncrypt.Decrypt(System.String)">
            <summary>
            md5解密
            </summary>
            <param name="Text"></param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.util.MEncrypt.Decrypt(System.String,System.String)">
            <summary> 
            md5解密数据 
            </summary> 
            <param name="Text"></param> 
            <param name="sKey"></param> 
            <returns></returns> 
        </member>
        <member name="M:MechTE_480.util.MEncrypt.Encode(System.String)">
            <summary>
            DES加密
            </summary>
            <param name="mNeedEncodeString"></param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.util.MEncrypt.Decode(System.String)">
            <summary>
            DES解密
            </summary>
            <param name="mNeedEncodeString"></param>
            <returns></returns>
        </member>
        <member name="T:MechTE_480.util.MStringUtil">
            <summary>
            字符串操作类
            </summary>
        </member>
        <member name="M:MechTE_480.util.MStringUtil.MStartApp(System.String)">
            <summary>
            启动应用网站
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:MechTE_480.util.MStringUtil.MReverse(System.String)">
            <summary>
            将字符按2个长度为一组进行反序
            </summary>
            <param name="value">11 22 33 44</param>
            <returns>44332211->11223344</returns>
        </member>
        <member name="M:MechTE_480.util.MStringUtil.Reverse(System.String)">
            <summary>
            将字符按2个长度为一组进行反序
            </summary>
            <param name="value">11 22 33 44</param>
            <returns>44332211->11223344</returns>
        </member>
        <member name="M:MechTE_480.util.MStringUtil.ClearSpaces(System.String)">
            <summary>
            清除字符串中的空格(00 00 00 00 > 00000000)
            </summary>
            <param name="value"></param>
            <returns>string</returns>
        </member>
        <member name="M:MechTE_480.util.MStringUtil.MClearSpaces(System.String)">
            <summary>
            清除字符串中的空格(00 00 00 00 > 00000000)
            </summary>
            <param name="value"></param>
            <returns>string</returns>
        </member>
        <member name="M:MechTE_480.util.MStringUtil.StringToListStr(System.String,System.Char,System.Boolean)">
            <summary>
            把字符串按照分隔符转换成List
            </summary>
            <param name="str">源字符串</param>
            <param name="speater">分隔符</param>
            <param name="toLower">是否转换为小写</param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.util.MStringUtil.StringToArray(System.String)">
            <summary>
            把字符串转 按照, 分割 换为数组
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.util.MStringUtil.StrLength(System.String)">
            <summary>
            得到字符串长度，一个汉字长度为2
            </summary>
            <param name="inputString">参数字符串</param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.util.MStringUtil.HtmlToTxt(System.String)">
            <summary>
            HTML转行成TEXT
            </summary>
            <param name="strHtml"></param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.util.MStringUtil.IsNullOrEmpty(System.String)">
            <summary>
            检测一个字符串是否为空
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:MechTE_480.util.MUtil">
            <summary>
            通用工具类
            </summary>
        </member>
        <member name="T:MechTE_480.util.MUtil.TimeOutDelegate`2">
            <summary>
             定义一个泛型委托，用于定义带有超时检查的方法的签名
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TR"></typeparam>
        </member>
        <member name="M:MechTE_480.util.MUtil.Execute``2(MechTE_480.util.MUtil.TimeOutDelegate{``0,``1},``0,``1@,System.TimeSpan)">
            <summary>
            检测传入的方法是否超时
            </summary>
            <param name="timeoutMethod">方法</param>
            <param name="param">方法的参数</param>
            <param name="result">执行结果</param>
            <param name="timeout">超时时间</param>
            <typeparam name="T">方法的参数类型</typeparam>
            <typeparam name="TR">执行结果的类型</typeparam>
            <returns>是否超时</returns>
        </member>
        <member name="M:MechTE_480.util.MUtil.WaitSomething(System.Int32,System.Int32,System.Func{System.Boolean})">
            <summary>
            在指定的时间内等待某个函数的执行结果,调用 bool result = WaitSomething(5000, 1000, () =>{})
            </summary>
            <param name="timeout">表示等待的最大时间，以毫秒为单位</param>
            <param name="freq">表示等待的频率，即每隔多少毫秒检查一次函数的执行结果</param>
            <param name="func">表示要等待的函数，它是一个返回布尔值的委托</param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.util.MUtil.GetCurrentProgramDirectory">
            <summary>
            获取当前程序根目录地址(D:\File\bin\Debug)
            如果引用dll不在根目录，会触发异常
            </summary>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.util.MUtil.GenerateNumberSequence(System.Int32,System.Int32)">
            <summary>
            生成数字字符串序列(传0,6生成 0 1 2 3 4 5)
            </summary>
            <param name="startNumber">序列中第一个整数的值</param>
            <param name="sequenceLength">生成的顺序总条数</param>
            <returns>string</returns>  
        </member>
        <member name="M:MechTE_480.util.MUtil.SetMD5(System.String)">
            <summary>
            根据配置对指定字符串进行 MD5 加密
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.util.MUtil.IsEmail(System.String)">
            <summary>
            验证EMail是否合法
            </summary>
            <param name="email">要验证的Email</param>
        </member>
        <member name="M:MechTE_480.util.MUtil.IsInt(System.String)">
            <summary>
            验证是否为整数 如果为空，认为验证不合格 返回false
            </summary>
            <param name="number">要验证的整数</param>        
        </member>
        <member name="M:MechTE_480.util.MUtil.IsNumber(System.String)">
            <summary>
            验证是否为数字
            </summary>
            <param name="number">要验证的数字</param>        
        </member>
        <member name="T:MechTE_480.Windows.MWin">
            <summary>
            系统相关API
            </summary>
            <summary>
            系统音频设置
            </summary>
        </member>
        <member name="M:MechTE_480.Windows.MWin.MessageBox(System.IntPtr,System.String,System.String,System.Int32)">
            <summary>
            Windows操作系统提供的一个函数，用于在应用程序中显示消息框。消息框可以用于显示警告、错误、提示等信息，并与用户进行交互。
            </summary>
            <param name="hWnd">窗口句柄设为0，表示使用默认窗口</param>
            <param name="text">提示描述</param>
            <param name="caption">标题</param>
            <param name="options">消息框的选项，例如按钮类型和图标类型</param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.Windows.MWin.RunDll(System.String)">
            <summary>
            执行rundll32.exe
            </summary>
            <param name="arguments"></param>
        </member>
        <member name="M:MechTE_480.Windows.MWin.IsConnectInternet">
            <summary>
            用于检查网络是否可以连接互联网
            </summary>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.Windows.MWin.PingIpOrDomainName(System.String)">
            <summary>
            用于检查IP地址或域名(www.cnblogs.com)是否可以使用TCP/IP协议访问(使用Ping命令),true表示Ping成功,false表示Ping失败
            </summary>
            <param name="strIpOrDName">输入参数,表示IP地址或域名</param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.Windows.MWin.SetMasterVolume(System.Single)">
            <summary>
            设置系统音量
            </summary>
        </member>
        <member name="M:MechTE_480.Windows.MWin.GetMasterVolume">
            <summary>
            返回系统音量(1~100)
            </summary>
        </member>
        <member name="M:MechTE_480.Windows.MWin.SetMasterVolumeMute(System.Boolean)">
            <summary>
            设置系统静音
            </summary>
            <param name="isMuted"></param>
        </member>
        <member name="M:MechTE_480.Windows.MWin.MesBoxs(System.String,System.String)">
            <summary>
            弹出提示
            </summary>
            <param name="text">内容描述</param>
            <param name="caption">标题</param>
        </member>
        <member name="M:MechTE_480.Windows.MWin.MesBoxs(System.String,System.String,System.Int32)">
            <summary>
            弹出提示,传参
            </summary>
            <param name="text">内容描述</param>
            <param name="caption">标题</param>
            <param name="options">1:确认/取消,2:终止/重试/忽略,3:是/否/取消,4:是/否,5:重试/取消,6:取消/重试/继续</param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.Windows.MWin.OpenA2Dp">
            <summary>
            启动播放装置
            </summary>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.Windows.MWin.EnterHfp">
            <summary>
            开启音频设置显示到桌面
            </summary>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.Windows.MWin.OpenDevice">
            <summary>
            开启系统设备管理器
            </summary>
        </member>
        <member name="M:MechTE_480.Windows.MWin.CloseRunDll(System.String)">
            <summary>
            清除rundll32进程
            </summary>
            <param name="processName">rundll32</param>
            <returns>bool</returns>
        </member>
        <member name="M:MechTE_480.Windows.MWin.IsUserAdministrator">
            <summary>
            判断当前程序是否是管理员
            </summary>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.Windows.MWin.SetMeStart(System.Boolean)">
            <summary>
            将本程序设为开启自启
            </summary>
            <param name="onOff">自启开关</param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.Windows.MWin.SetAutoStart(System.Boolean,System.String,System.String)">
            <summary>
            将应用程序设为或不设为开机启动
            </summary>
            <param name="onOff">自启开关</param>
            <param name="appName">应用程序名</param>
            <param name="appPath">应用程序完全路径</param>
        </member>
        <member name="M:MechTE_480.Windows.MWin.IsExistKey(System.String)">
            <summary>
            判断注册键值对是否存在，即是否处于开机启动状态
            </summary>
            <param name="keyName">键值名</param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.Windows.MWin.SelfRunning(System.Boolean,System.String,System.String)">
            <summary>
            写入或删除注册表键值对,即设为开机启动或开机不启动
            </summary>
            <param name="isStart">是否开机启动</param>
            <param name="exeName">应用程序名</param>
            <param name="path">应用程序路径带程序名</param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.Windows.IAudioEndpointVolume.GetChannelCount(System.UInt32@)">
            <summary>
            Gets a count of the channels in the audio stream.
            </summary>
            <param name="channelCount">The number of channels.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:MechTE_480.Windows.IAudioEndpointVolume.SetMasterVolumeLevel(System.Single,System.Guid)">
            <summary>
            Sets the master volume level of the audio stream, in decibels.
            </summary>
            <param name="level">The new master volume level in decibels.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:MechTE_480.Windows.IAudioEndpointVolume.SetMasterVolumeLevelScalar(System.Single,System.Guid)">
            <summary>
            Sets the master volume level, expressed as a normalized, audio-tapered value.
            </summary>
            <param name="level">The new master volume level expressed as a normalized value between 0.0 and 1.0.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:MechTE_480.Windows.IAudioEndpointVolume.GetMasterVolumeLevel(System.Single@)">
            <summary>
            Gets the master volume level of the audio stream, in decibels.
            </summary>
            <param name="level">The volume level in decibels.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:MechTE_480.Windows.IAudioEndpointVolume.GetMasterVolumeLevelScalar(System.Single@)">
            <summary>
            Gets the master volume level, expressed as a normalized, audio-tapered value.
            </summary>
            <param name="level">The volume level expressed as a normalized value between 0.0 and 1.0.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:MechTE_480.Windows.IAudioEndpointVolume.SetChannelVolumeLevel(System.UInt32,System.Single,System.Guid)">
            <summary>
            Sets the volume level, in decibels, of the specified channel of the audio stream.
            </summary>
            <param name="channelNumber">The channel number.</param>
            <param name="level">The new volume level in decibels.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:MechTE_480.Windows.IAudioEndpointVolume.SetChannelVolumeLevelScalar(System.UInt32,System.Single,System.Guid)">
            <summary>
            Sets the normalized, audio-tapered volume level of the specified channel in the audio stream.
            </summary>
            <param name="channelNumber">The channel number.</param>
            <param name="level">The new master volume level expressed as a normalized value between 0.0 and 1.0.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:MechTE_480.Windows.IAudioEndpointVolume.GetChannelVolumeLevel(System.UInt32,System.Single@)">
            <summary>
            Gets the volume level, in decibels, of the specified channel in the audio stream.
            </summary>
            <param name="channelNumber">The zero-based channel number.</param>
            <param name="level">The volume level in decibels.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:MechTE_480.Windows.IAudioEndpointVolume.GetChannelVolumeLevelScalar(System.UInt32,System.Single@)">
            <summary>
            Gets the normalized, audio-tapered volume level of the specified channel of the audio stream.
            </summary>
            <param name="channelNumber">The zero-based channel number.</param>
            <param name="level">The volume level expressed as a normalized value between 0.0 and 1.0.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:MechTE_480.Windows.IAudioEndpointVolume.SetMute(System.Boolean,System.Guid)">
            <summary>
            Sets the muting state of the audio stream.
            </summary>
            <param name="isMuted">True to mute the stream, or false to unmute the stream.</param>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:MechTE_480.Windows.IAudioEndpointVolume.GetMute(System.Boolean@)">
            <summary>
            Gets the muting state of the audio stream.
            </summary>
            <param name="isMuted">The muting state. True if the stream is muted, false otherwise.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:MechTE_480.Windows.IAudioEndpointVolume.GetVolumeStepInfo(System.UInt32@,System.UInt32@)">
            <summary>
            Gets information about the current step in the volume range.
            </summary>
            <param name="step">The current zero-based step index.</param>
            <param name="stepCount">The total number of steps in the volume range.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:MechTE_480.Windows.IAudioEndpointVolume.VolumeStepUp(System.Guid)">
            <summary>
            Increases the volume level by one step.
            </summary>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:MechTE_480.Windows.IAudioEndpointVolume.VolumeStepDown(System.Guid)">
            <summary>
            Decreases the volume level by one step.
            </summary>
            <param name="eventContext">A user context value that is passed to the notification callback.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:MechTE_480.Windows.IAudioEndpointVolume.QueryHardwareSupport(System.UInt32@)">
            <summary>
            Queries the audio endpoint device for its hardware-supported functions.
            </summary>
            <param name="hardwareSupportMask">A hardware support mask that indicates the capabilities of the endpoint.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="M:MechTE_480.Windows.IAudioEndpointVolume.GetVolumeRange(System.Single@,System.Single@,System.Single@)">
            <summary>
            Gets the volume range of the audio stream, in decibels.
            </summary>
            <param name="volumeMin">The minimum volume level in decibels.</param>
            <param name="volumeMax">The maximum volume level in decibels.</param>
            <param name="volumeStep">The volume increment level in decibels.</param>
            <returns>An HRESULT code indicating whether the operation passed of failed.</returns>
        </member>
        <member name="T:MechTE_480.windows.MMouse">
            <summary>
            控制鼠标类
            </summary>
        </member>
        <member name="M:MechTE_480.windows.MMouse.MouseMove(System.Drawing.Point,System.Int32,System.Int32)">
            <summary>
            鼠标移动
            </summary>
            <param name="location">窗体坐标（this.Location）</param>
            <param name="offSetValueX">X坐标偏移值</param>
            <param name="offSetValueY">Y坐标偏移值（this.Location）</param>
        </member>
        <member name="M:MechTE_480.windows.MMouse.MouseLeftClick">
            <summary>
            鼠标左键点击
            </summary>
        </member>
        <member name="M:MechTE_480.windows.MMouse.MouseRightClick">
            <summary>
            鼠标右键点击
            </summary>
        </member>
        <member name="M:MechTE_480.windows.MMouse.MouseMiddleClick">
            <summary>
            鼠标中键点击
            </summary>
        </member>
        <member name="T:MechTE_480.xml.MXml">
            <summary>
            XML动态操作类(定制类不通用)
            </summary>
        </member>
        <member name="M:MechTE_480.xml.MXml.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="strPath"></param>
        </member>
        <member name="M:MechTE_480.xml.MXml.XmlLoad">
            <summary>
            导入XML文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.xml.MXml.XmlLoad(System.String)">
            <summary>
            导入XML文件
            </summary>
            <param name="strPath">XML文件路径</param>
        </member>
        <member name="M:MechTE_480.xml.MXml.GetXmlFullPath(System.String)">
            <summary>
            返回完整路径
            </summary>
            <param name="strPath">Xml的路径</param>
        </member>
        <member name="M:MechTE_480.xml.MXml.ReadRequest(System.String,System.String,System.String)">
            <summary>
            读取Request中node节点的值
            </summary>
            <param name="funName"></param>
            <param name="node"></param>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.xml.MXml.ReadAllChild(System.String)">
            <summary>
            获取某一节点的所有孩子节点的值
            </summary>
            <param name="node">要查询的节点</param>
        </member>
        <member name="M:MechTE_480.xml.MXml.GetDataSetByXml(System.String)">
            <summary>
            读取XML返回DataSet
            </summary>
            <param name="strXmlPath">XML文件相对路径</param>
        </member>
        <member name="M:MechTE_480.xml.MXml.InsertRequestFormat(System.String,System.String)">
            <summary>
            插入RequestFormat节点数据
            </summary>
            <param name="element">元素名</param>
            <param name="attribute">属性名,如果""则不插值</param>
            使用示列:
            ("packet_type","0x05");
        </member>
        <member name="M:MechTE_480.xml.MXml.InsertRequestFormatResult(System.String)">
            <summary>
            插入RequestFormat数组节点,
            在需要传指令调用时使用,
            如:传bd:112233445566 根据传入的值进行赋值传入
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:MechTE_480.xml.MXml.InsertResponseFormatResult(System.String)">
            <summary>
            插入RequestFormat数组节点
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:MechTE_480.xml.MXml.InsertResponseFormat(System.String,System.String)">
            <summary>
            插入ResponseFormat节点数据 ,  响应匹配到的节点值
            </summary>
            <param name="element">元素名</param>
            <param name="attribute">属性名,如果""则不插值</param>
            使用示列:
            ("packet_type","0x05");
        </member>
        <member name="M:MechTE_480.xml.MXml.InitializeTheNode">
            <summary>
            初始化节点
            </summary>
            <returns></returns>
        </member>
        <member name="M:MechTE_480.xml.MXml.CreateChildNode">
            <summary>
            设定方法属性,创建节点对应的方法
            RequestFormat,
            ResponseFormat
            </summary>
        </member>
        <member name="M:MechTE_480.xml.MXml.UpdateRequest(System.String,System.String,System.String,System.String)">
            <summary>
            修改Request指定节点的属性值
            </summary>
            <param name="path"></param>
            <param name="node">节点,传入方法名</param>
            <param name="element">节点,传入属性名称</param>
            <param name="value">更新的值</param>
        </member>
        <member name="M:MechTE_480.xml.MXml.Delete(System.String,System.String)">
            <summary>
            删除节点值
            </summary>
            <param name="path">路径</param>
            <param name="node">节点,传入方法名</param>
        </member>
        <member name="M:MechTE_480.xml.MXml.Delete(System.String,System.String,System.String)">
            <summary>
            删除数据
            </summary>
            <param name="path">路径</param>
            <param name="node">节点</param>
            <param name="attribute">属性名，非空时删除该节点属性值，否则删除节点值</param>
            使用示列:
            XMLProsess.Delete(path, "/Node", "")
            XMLProsess.Delete(path, "/Node", "Attribute")
        </member>
        <member name="M:MechTE_480.xml.MXml.DeleteXmlAllRows(System.String)">
            <summary>
            删除所有行
            </summary>
            <param name="strXmlPath">XML路径</param>
        </member>
        <member name="M:MechTE_480.xml.MXml.DeleteXmlRowByIndex(System.String,System.Int32)">
            <summary>
            通过删除DataSet中指定索引行，重写XML以实现删除指定行
            </summary>
            <param name="strXmlPath"></param>
            <param name="iDeleteRow">要删除的行在DataSet中的Index值</param>
        </member>
        <member name="M:MechTE_480.xml.MXml.DeleteXmlRows(System.String,System.String,System.String[])">
            <summary>
            删除指定列中指定值的行
            </summary>
            <param name="strXmlPath">XML相对路径</param>
            <param name="strColumn">列名</param>
            <param name="columnValue">指定值</param>
        </member>
        <member name="F:MechTE_480.xml.MXml.PathXml">
            <summary>
            xml路径
            </summary>
        </member>
        <member name="F:MechTE_480.xml.MXml.FunName">
            <summary>
            方法的节点名称
            </summary>
        </member>
        <member name="F:MechTE_480.xml.MXml.SCurrenPath">
            <summary>
            根目录路径
            </summary>
        </member>
        <member name="P:MechTE_480.xml.MXml.XmlPath">
            <summary>
            xml路径
            </summary>
        </member>
    </members>
</doc>
